{"version":3,"sources":["components/PhotoCard.js","utils/api.js","components/SpeciesFilter.js","App.js","serviceWorker.js","index.js"],"names":["PhotoCard","title","text","imgURL","className","src","alt","role","type","filterResults","filterSpecie","allCards","filter","card","species","includes","SpeciesFilter","newFilter","id","onChange","aria-describedby","App","useState","cards","setCards","setFilter","useEffect","a","fetch","then","resp","json","catch","err","console","log","response","newCards","map","name","status","image","img","photoCards","key","document","getElementById","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kPAsBeA,MApBf,YAA6C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OAC9B,OACI,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,QACX,yBAAKC,IAAMF,EAASC,UAAU,eAAeE,IAAI,QACjD,yBAAKF,UAAU,aACX,wBAAIA,UAAU,cAAeH,GAC7B,uBAAGG,UAAU,aAAcF,GAC3B,yBAAKE,UAAU,YAAYG,KAAK,SAC5B,4BAAQC,KAAK,SAASJ,UAAU,mBAAhC,eACA,4BAAQI,KAAK,SAASJ,UAAU,mBAAhC,eAEJ,uBAAGA,UAAU,aAAY,2BAAOA,UAAU,cAAjB,iCCVhCK,G,MAAgB,SAAEC,EAAcC,GAAhB,OAA8BA,EAASC,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAQC,SAASL,QCS3FM,MAXf,YAAuC,IAAdC,EAAa,EAAbA,UACrB,OACI,yBAAKb,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBc,GAAG,gBAAtC,kBAEJ,2BAAOV,KAAK,OAAOW,SAAWF,EAAYb,UAAU,eAAec,GAAG,iBAAiBE,mBAAiB,oBC0CrGC,MA5Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENV,EAFM,KAEEa,EAFF,KAIbC,oBAAS,sBAAC,8BAAAC,EAAA,sEFVkBC,MAAM,2DAC/BC,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBC,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MEQnB,OACJG,EADI,OAEO,KAAXxB,IAAewB,EAAW3B,EAAcG,EAAQwB,IAE9CC,EAAWD,EAASE,KAAK,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQ1B,EAAjB,EAAiBA,QAAS2B,EAA1B,EAA0BA,MAA1B,MAC3B,CACExC,MAAOsC,EACPrC,KAAK,GAAD,OAAKsC,EAAL,YAAe1B,GACnB4B,IAAKD,MAIXjB,EAASa,GAZD,2CAaP,CAACzB,IAEJ,IAIM+B,EAAapB,EAAMe,KAAI,SAACzB,GAAD,OACzB,kBAAC,EAAD,CACI+B,IAAM/B,EAAKZ,MAAQY,EAAKX,KACxBD,MAAQY,EAAKZ,MACbC,KAAOW,EAAKX,KACZC,OAASU,EAAK6B,SAItB,OACI,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACIa,UAjBM,WAChBQ,EAAUoB,SAASC,eAAe,kBAAkBC,UAkB5CJ,KChCQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASC,eAAe,SDyHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.2b34344e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PhotoCard({ title, text, imgURL }) {\n    return (\n        <div className=\"photho-card col-md-4\">\n            <div className=\"card\">\n                <img src={ imgURL } className=\"card-img-top\" alt=\"wow\" />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{ title }</h5>\n                    <p className=\"card-text\">{ text }</p>\n                    <div className=\"btn-group\" role=\"group\">\n                        <button type=\"button\" className=\"btn btn-primary\">Add to cart</button>\n                        <button type=\"button\" className=\"btn btn-primary\">View photo</button>\n                    </div>\n                    <p className=\"card-text\"><small className=\"text-muted\">Last updated 0 mins ago</small></p>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default PhotoCard;\n","export const getCards = () => fetch('https://rickandmortyapi.com/api/character/1,2,6,7,14,15')\n    .then( resp => resp.json())\n    .catch( err => console.log(err));\n\nexport const filterResults = ( filterSpecie, allCards ) => allCards.filter( card => card.species.includes(filterSpecie));\n\n\n","import React from \"react\";\n\nfunction SpeciesFilter({ newFilter }) {\n    return (\n        <div className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"basic-addon3\">Filter Specie</span>\n            </div>\n            <input type=\"text\" onChange={ newFilter } className=\"form-control\" id=\"species-filter\" aria-describedby=\"basic-addon3\" />\n        </div>\n        );\n}\n\nexport default SpeciesFilter;\n","import React, { useState, useEffect } from \"react\";\nimport PhotoCard from \"./components/PhotoCard\";\nimport \"./styles/App.css\";\nimport {filterResults, getCards} from \"./utils/api\";\nimport SpeciesFilter from \"./components/SpeciesFilter\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(async () => {\n    let response = await getCards();\n    if (filter !== '') response = filterResults(filter, response);\n\n    const newCards = response.map( ({ name, status, species, image }) => (\n        {\n          title: name,\n          text: `${status} ${species}`,\n          img: image,\n        }\n    ));\n\n    setCards(newCards);\n  }, [filter]);\n\n  const newFilter = () => {\n    setFilter(document.getElementById(\"species-filter\").value);\n  }\n\n  const photoCards = cards.map((card) => (\n      <PhotoCard\n          key={ card.title + card.text }\n          title={ card.title}\n          text={ card.text }\n          imgURL={ card.img }\n      />\n  ));\n\n  return (\n      <div className=\"app\">\n        <div className=\"card-deck\">\n          <SpeciesFilter\n              newFilter={ newFilter }\n          />\n          { photoCards }\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}